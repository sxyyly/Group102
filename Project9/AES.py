import time
#s=[2,0,0,0,0,0,0,0,2,4,1,0,1,6,6,0]
#k=[2,0,0,0,0,0,0,0,2,4,1,0,1,6,6,0]
s=[2,0,2,1,0,0,4,6,0,0,8,7,0,0,0,0]
k0=[2,0,2,1,0,0,4,6,0,0,8,7,0,0,0,0]
k1="32303231303034363031363100000000"
c=[[],[],[],[]]
for i in range(0,4):
    #完成初始化及第一轮异或密钥
	for j in range(0,4):
	  c[i].append(str(s[i+j]^k0[i+j]).zfill(8))#进行填充
#[['']]形式

def SubBytes(c):
	S=[[0x63,0x7c,0x77,0x7b,0xf2,0x6b,0x6f,0xc5,0x30,0x01,0x67,0x2b,0xfe,0xd7,0xab,0x76],[0xca,0x82,0xc9,0x7d,0xfa,0x59,0x47,0xf0,0xad,0xd4,0xa2,0xaf,0x9c,0xa4,0x72,0xc0],[0xb7,0xfd,0x93,0x26,0x36,0x3f,0xf7,0xcc,0x34,0xa5,0xe5,0xf1,0x71,0xd8,0x31,0x15],[0x04,0xc7,0x23,0xc3,0x18,0x96,0x05,0x9a,0x07,0x12,0x80,0xe2,0xeb,0x27,0xb2,0x75],[0x09,0x83,0x2c,0x1a,0x1b,0x6e,0x5a,0xa0,0x52,0x3b,0xd6,0xb3,0x29,0xe3,0x2f,0x84],[0x53,0xd1,0x00,0xed,0x20,0xfc,0xb1,0x5b,0x6a,0xcb,0xbe,0x39,0x4a,0x4c,0x58,0xcf],[0xd0,0xef,0xaa,0xfb,0x43,0x4d,0x33,0x85,0x45,0xf9,0x02,0x7f,0x50,0x3c,0x9f,0xa8],[0x51,0xa3,0x40,0x8f,0x92,0x9d,0x38,0xf5,0xbc,0xb6,0xda,0x21,0x10,0xff,0xf3,0xd2],[0xcd,0x0c,0x13,0xec,0x5f,0x97,0x44,0x17,0xc4,0xa7,0x7e,0x3d,0x64,0x5d,0x19,0x73],[0x60,0x81,0x4f,0xdc,0x22,0x2a,0x90,0x88,0x46,0xee,0xb8,0x14,0xde,0x5e,0x0b,0xdb],[0xe0,0x32,0x3a,0x0a,0x49,0x06,0x24,0x5c,0xc2,0xd3,0xac,0x62,0x91,0x95,0xe4,0x79],[0xe7,0xc8,0x37,0x6d,0x8d,0xd5,0x4e,0xa9,0x6c,0x56,0xf4,0xea,0x65,0x7a,0xae,0x08],[0xba,0x78,0x25,0x2e,0x1c,0xa6,0xb4,0xc6,0xe8,0xdd,0x74,0x1f,0x4b,0xbd,0x8b,0x8a],[0x70,0x3e,0xb5,0x66,0x48,0x03,0xf6,0x0e,0x61,0x35,0x57,0xb9,0x86,0xc1,0x1d,0x9e],[0xe1,0xf8,0x98,0x11,0x69,0xd9,0x8e,0x94,0x9b,0x1e,0x87,0xe9,0xce,0x55,0x28,0xdf],[0x8c,0xa1,0x89,0x0d,0xbf,0xe6,0x42,0x68,0x41,0x99,0x2d,0x0f,0xb0,0x54,0xbb,0x16]]
	cs=[[],[],[],[]]
	#print(c)
	for i in range(0,4):
		for j in range(0,4):
			a=bin(int(c[i][j]))[2:].zfill(8)
			#print(a)
			x=int(a[0:4],2)
			#print(x)
			y=int(a[4:],2)
			#print(y)
			cs[i].append(str(S[x][y]))#替换
	#print(cs)
	return cs#[['']]形式

def ShiftRows(c):
	index=[[0,1,2,3],[1,2,3,0],[2,3,0,1],[3,0,1,2]]
	cs=[[],[],[],[]]
	for j in range(0,4):
		for i in index[j]:
			cs[j].append(c[j][i])
	#print(cs)
	return cs#[['']]形式

def mul02(c):#乘02的情况
	c=bin(int(c))[2:].zfill(8)
	if c[0]=='1':#乘02的情况
		r1=int(c[1:8]+'0',2)^int('00011011',2)
	else:
		r1=int(c[1:8]+'0',2)
	return r1

def mul03(c):
	r1=mul02(c)
	r2=r1^int(c)
	return r2

def MixColumns(c):
	#c1=c[0::4]
	#c2=c[1::4]
	#c3=c[2::4]
	#c4=c[3::4]
	#c_new=[c1,c2,c3,c4]
	cs=[[],[],[],[]]
	t=0
	for i in range(0,4):
		c_1=mul02(c[i][0])^mul03(c[i][1])^int(c[i][2])^int(c[i][3])
		cs[i].append(c_1)
		c_2=int(c[i][0])^mul02(c[i][1])^mul03(c[i][2])^int(c[i][3])
		cs[i].append(c_2)
		c_3=int(c[i][0])^int(c[i][1])^mul02(c[i][2])^mul03(c[i][3])
		cs[i].append(c_3)
		c_4=mul03(c[i][0])^int(c[i][1])^int(c[i][2])^mul02(c[i][3])
		cs[i].append(c_4)	
	return cs#是[[1],[]]格式


def K_ShiftRows(B):
        index=[2,3,4,5,6,7,0,1]#循环左移一个字节（两位）
        Sft_b=[]
        for i in index:
                Sft_b.append(B[i])
        return Sft_b

def SubBytes1(c):
	S=[[0x63,0x7c,0x77,0x7b,0xf2,0x6b,0x6f,0xc5,0x30,0x01,0x67,0x2b,0xfe,0xd7,0xab,0x76],[0xca,0x82,0xc9,0x7d,0xfa,0x59,0x47,0xf0,0xad,0xd4,0xa2,0xaf,0x9c,0xa4,0x72,0xc0],[0xb7,0xfd,0x93,0x26,0x36,0x3f,0xf7,0xcc,0x34,0xa5,0xe5,0xf1,0x71,0xd8,0x31,0x15],[0x04,0xc7,0x23,0xc3,0x18,0x96,0x05,0x9a,0x07,0x12,0x80,0xe2,0xeb,0x27,0xb2,0x75],[0x09,0x83,0x2c,0x1a,0x1b,0x6e,0x5a,0xa0,0x52,0x3b,0xd6,0xb3,0x29,0xe3,0x2f,0x84],[0x53,0xd1,0x00,0xed,0x20,0xfc,0xb1,0x5b,0x6a,0xcb,0xbe,0x39,0x4a,0x4c,0x58,0xcf],[0xd0,0xef,0xaa,0xfb,0x43,0x4d,0x33,0x85,0x45,0xf9,0x02,0x7f,0x50,0x3c,0x9f,0xa8],[0x51,0xa3,0x40,0x8f,0x92,0x9d,0x38,0xf5,0xbc,0xb6,0xda,0x21,0x10,0xff,0xf3,0xd2],[0xcd,0x0c,0x13,0xec,0x5f,0x97,0x44,0x17,0xc4,0xa7,0x7e,0x3d,0x64,0x5d,0x19,0x73],[0x60,0x81,0x4f,0xdc,0x22,0x2a,0x90,0x88,0x46,0xee,0xb8,0x14,0xde,0x5e,0x0b,0xdb],[0xe0,0x32,0x3a,0x0a,0x49,0x06,0x24,0x5c,0xc2,0xd3,0xac,0x62,0x91,0x95,0xe4,0x79],[0xe7,0xc8,0x37,0x6d,0x8d,0xd5,0x4e,0xa9,0x6c,0x56,0xf4,0xea,0x65,0x7a,0xae,0x08],[0xba,0x78,0x25,0x2e,0x1c,0xa6,0xb4,0xc6,0xe8,0xdd,0x74,0x1f,0x4b,0xbd,0x8b,0x8a],[0x70,0x3e,0xb5,0x66,0x48,0x03,0xf6,0x0e,0x61,0x35,0x57,0xb9,0x86,0xc1,0x1d,0x9e],[0xe1,0xf8,0x98,0x11,0x69,0xd9,0x8e,0x94,0x9b,0x1e,0x87,0xe9,0xce,0x55,0x28,0xdf],[0x8c,0xa1,0x89,0x0d,0xbf,0xe6,0x42,0x68,0x41,0x99,0x2d,0x0f,0xb0,0x54,0xbb,0x16]]
	temp=[]
	for i in c:
		temp.append(bin(int(("0x"+i),16))[2:].zfill(8))
	cs=[]
	for i in temp:
		x = int(eval("0b"+i[:4]))#前四位作为行数
		y = int(eval("0b"+i[4:]))#后四位作为列数
		#print(str(hex(S[x][y])))
		cs.append(str(hex(S[x][y])))#替换
	return cs


def Key_Expansion(k):
	RC=["01000000","02000000","04000000","08000000","10000000","20000000","40000000","80000000","1B000000","36000000"]#常熟列
	exp_key=[[],[],[],[]]
	n=0
	#初始密钥复制到扩展密钥数组的前四个字
	for i in range(0,32,8):
		exp_key[n].append(k[i:i+8])
		n+=1
	#密钥扩展
	for i in range(4,44):
		exp_key.append([])#添加空列表存储生成的轮密钥
		if i%4==0:
			subword = []
			B=K_ShiftRows(exp_key[i-1][0])#B为要过g函数的四个字节，8位十六进制
			for n in range(0,len(B),2):
				subword.append(B[n]+B[n+1])#每两位为一个元素 ['00', '00', '00', '00']
			new_B="".join(SubBytes1(subword))
			new_B=new_B.replace("0x","")
			#print("0x"+RC[int(i/4-1)])
			#print(exp_key[i-4][0])
			fin_B=eval("0x"+new_B)^eval("0x"+RC[int(i/4-1)])^eval("0x"+exp_key[i-4][0])
			#print(fin_B)
			exp_key[i].append(format(fin_B,'x').zfill(8))
		else:
			d=eval("0x"+exp_key[i-1][0])^eval("0x"+exp_key[i-4][0])
			#print(exp_key[i-1][0])
			#print(exp_key[i-4][0])
			#print(d)
			exp_key[i].append(format(d,'x').zfill(8))
	newkey=[]#二进制形式存储，列表每个元素都是是含有4个字符串的列表（一个字）
	w=0
	for n in range(4,44,4):
		newkey.append([])
		newkey[w].append(format(eval("0x"+exp_key[n][0]),'b').zfill(32))
		newkey[w].append(format(eval("0x"+exp_key[n+1][0]),'b').zfill(32))
		newkey[w].append(format(eval("0x"+exp_key[n+2][0]),'b').zfill(32))
		newkey[w].append(format(eval("0x"+exp_key[n+3][0]),'b').zfill(32))
		w+=1
	return newkey


def AddRoundKey(c,k,time):
	key=[[],[],[],[]]
	for i in range(0,4):
		for j in range(0,4):
			key[i].append(k[time][i][j:j+8])
	#print(key)
	c_new=[[],[],[],[]]
	for j in range(0,4):
		for i in range(0,4):
			c_new[j].append(str(int(c[j][i])^int(key[j][i],2)))#?
	#print(c_new)
	return c_new
start=time.time()
for i in range(0,9):
	c=SubBytes(c)
	#print(c)
	c=ShiftRows(c)
	#print(c)
	c=MixColumns(c)
	#print(c)
	k=Key_Expansion(k1)
	#print(k)
	c=AddRoundKey(c,k,i)
	#print(c)
c=SubBytes(c)
c=ShiftRows(c)
k=Key_Expansion(k1)
c=AddRoundKey(c,k,9)
end=time.time()
print("202100460087加密结果是:",c)
print("运行时间为：",end-start,"s")

 
 
